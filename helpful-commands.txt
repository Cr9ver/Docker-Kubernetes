# Docker
docker ps : view running containers
docker system prune : remove unused data 
docker run : run container
docker stop  : stop running container
docker kill : kill(stop) container immediately 
docker exec -it $conatinerid sh : get full terminal access to conatiner 
docker exec -it #containerid $command : execute command on the container
docker run -it $containername sh - start up conatiner and attach shell 
docker build -f $filename :  for specifying docker file to be built


# Docker Compose
docker compose --build - build and start container
docker compose up -d - start containers
docker compose down - stop containers
docker compose ps - view running containers (ensure it's running from the direcotry where docker-compose file is )



# Kubernetes
kubectl apply -f $filename - create 
kubectl get pods - list running pods
minikube ip - view ip is making use of minikube
kubectl get svc or kubectl get servies - view services
kubectl describe $object-type $object-name - view information regarding specific object
kubectl get $objectname -o wide - get more information about the object
kubectl set image $objecttype/$objectname $containername=$imagename - set image imperatively
kubectl get storageclass- see options kubernetes has to create a PV(persistent volume)
kubectl describe storageclass - view more infor about PV
kubectl get pv - get persitent volumes(pv)
kubectl get pvc - get pvc
kubectl get services -A - view all services from all namespaces
kubectl get pods -n kube-system - view namespace for kube-system
kubectl delete pods -all - delete all pods
kubectl scale deployment $deployment --replicas=5 - scale replicas to 5 for deployment
kubectl get pods --namespace=<your-namespace> -- view pods in a particular namespace
kubectl edit $objectname - to edit object from file
kubectl get all - view all created resources
kubectl get rs - view replicasets
kubectl get namespace - to view namespace
kubectl get ns - view namespaces
kubectl get pods --namespace=$name - view pods in specific namespace
kubectl get pods -n=$name - view pods in specific namespace
kubectl get pods --selector $label = view podswith specific labels
kubectl get all --selector env=dev,bu=tech,mu=red - example of using selector
kubectl get pods -o wide - view more info about pods
watch kubectl get pods - see status of pod realtime
kubectl get daemonsets - command to view daemon sets

###taint
kubectl taint nodes $node-name key=value:taint-effect - command to taint node
kubectl taint nodes $node-name key=value:taint-effect- - command to untaint node (-) at the end
taint effects - NoSchedule
                PreferNoSchedule
                NoExecute
            


### nodes
kubectl label nodes $node-name $key=$value - command to label nodes

IMPERATIVE kubectl commands 
kubectl run nginx --image=nginx --dry-run=client -o yaml - Generate POD Manifest YAML file (-o yaml). Don't create it(--dry-run)
kubectl create deployment --image=nginx nginx --dry-run=client -o yaml - generate yaml 
kubectl create deployment --image=nginx nginx --dry-run=client -o yaml > nginx-deployment.yaml - Generate Deployment YAML file (-o yaml). Don’t create it(–dry-run) and save it to a file.
kubectl run redis --image=redis -n=dev - created redis pod running in finance namespace (create pod)
kubectl expose deployment $deployment-name --port 80 - create service for deployment 
kubectl edit deployment $deployment-name - edit deployment
kubectl replace -f file.yaml 
kubectl scale deployment $deploymentname--replicas=5 - scale deployment replicas to 5


IMPERATIVE EXAMPLE !!!!
kubectl create deployment --image=httpd:2.4-alpine httpd-frontend --replicas= - creates deployment with image as httpd:2.4-alpine, name as httpd-frontend and 3 replicas
kubectl run redis --labels=tier=db --image=redis:alpine --dry-run=client -o yaml - output yaml to create redis pod with label
kubectl create deployment webapp --image=kodekloud/webapp-color --replicas=3 --dry-run=client -o yaml - ouput yaml for deployment
kubectl run custom-nginx --image=nginx --port=8080  - create nginx pod and expose on port 8080 
kubectl create ns dev-ns - create namespace called dev-ns
kubectl scale deployment nginx --replicas=4 - scale replias of deployment called nginx
kubectl expose pod redis --port=6379 --name redis-service --dry-run=client -o yaml - Create a Service named redis-service of type ClusterIP to expose pod redis on port 6379