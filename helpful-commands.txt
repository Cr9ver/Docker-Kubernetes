# Docker
docker ps : view running containers
docker system prune : remove unused data 
docker run : run container
docker stop  : stop running container
docker kill : kill(stop) container immediately 
docker exec -it $conatinerid sh : get full terminal access to conatiner 
docker exec -it #containerid $command : execute command on the container
docker run -it $containername sh - start up conatiner and attach shell 
docker build -f $filename :  for specifying docker file to be built
docker logs $container - view docker logs
docker run --cap-add=$permission $image - add linux permissions to container
docker run --cap-drop=$permission $image - remove linux permissions from container
docker run --privileged $image - add all permissions to conatiner
docker volume create $volume_name - create docker volume


# Docker Compose
docker compose --build - build and start container
docker compose up -d - start containers
docker compose down - stop containers
docker compose ps - view running containers (ensure it's running from the direcotry where docker-compose file is )



# Kubernetes
kubectl apply -f $filename - create 
kubectl get pods - list running pods
minikube ip - view ip is making use of minikube
kubectl get svc or kubectl get servies - view services
kubectl describe $object-type $object-name - view information regarding specific object
kubectl get $objectname -o wide - get more information about the object
kubectl set image $objecttype/$objectname $containername=$imagename - set image imperatively
kubectl get storageclass- see options kubernetes has to create a PV(persistent volume)
kubectl describe storageclass - view more infor about PV
kubectl get pv - get persitent volumes(pv)
kubectl get pvc - get pvc
kubectl get services -A - view all services from all namespaces
kubectl get pods -n kube-system - view namespace for kube-system
kubectl delete pods -all - delete all pods
kubectl scale deployment $deployment --replicas=5 - scale replicas to 5 for deployment
kubectl get pods --namespace=<your-namespace> -- view pods in a particular namespace
kubectl edit $objectname - to edit object from file
kubectl get all - view all created resources
kubectl get rs - view replicasets
kubectl get namespace - to view namespace
kubectl get ns - view namespaces
kubectl get pods --namespace=$name - view pods in specific namespace
kubectl get pods -n=$name - view pods in specific namespace
kubectl get pods --selector $label = view podswith specific labels
kubectl get all --selector env=dev,bu=tech,mu=red - example of using selector
kubectl get pods -o wide - view more info about pods
watch kubectl get pods - see status of pod realtime
kubectl get daemonsets - command to view daemon sets
kubectl get pods --watch - view pos in realtime
kubectl logs $podname - to view logs for the pod -f option to view in real time
kubectl rollout status deployment/$deployment-name - see status of rollout
kubectl rollout history deployment/$deployment-name - view rollout history of deployment
kubect rollout undo deployment/$deployment-name - undo rollout of deployment
kubectl replace --force -f $filepath - force replacement
kubectl get configmaps - view configmaps
kubectl describe secrets - describe secret
kubectl get secrets - view secrets
kubectl get secret $secret-name -o yaml - view secret value
kubectl exec -it $podname sh - log into pod
kubectl config view - displays info of kubeconfig file to terminal
kubectl config view --kubeconfig=$CustomConfigFile - display info about custom config 
kubectl config use-context $user@cluster - change kubeconfig context
kubectl config --kubeconfig=/root/my-kube-config use-context research - use context from config file 
kubectl config --kubeconfig=/root/my-kube-config current-context -view current context from file
kubectl get $0bject -A --no-headers | wc -l - get the exact number of objects that exist without adding header
kubectl api-resources --namespaced=true - view namespaced resources
kubectl api-resources --namespaced=true - view non-namespaced resources
kubectl api-resources - view all info about objects including shortnames 
kubectl delete pod $podname --force - force deletion of pod
kubectl get $object $object name -o yaml - view yaml format used to create object
kubectl get $object,$object - view multiple objects at the same time
kubect get storageclass - view storage classes

###taint
kubectl taint nodes $node-name key=value:taint-effect - command to taint node
kubectl taint nodes $node-name key=value:taint-effect- - command to untaint node (-) at the end
taint effects - NoSchedule
                PreferNoSchedule
                NoExecute
            


### nodes
kubectl label nodes $node-name $key=$value - command to label nodes
kubectl drain $node - drain node of applications
kubectl cordon $node - marks a node unscheduable
kubectl uncordon $node - marks node scheduable
kubectl drain $node --ignore-daemonsets - drain node but ignore daemonsets

IMPERATIVE kubectl commands 
kubectl run nginx --image=nginx --dry-run=client -o yaml - Generate POD Manifest YAML file (-o yaml). Don't create it(--dry-run)
kubectl create deployment --image=nginx nginx --dry-run=client -o yaml - generate yaml 
kubectl create deployment --image=nginx nginx --dry-run=client -o yaml > nginx-deployment.yaml - Generate Deployment YAML file (-o yaml). Don’t create it(–dry-run) and save it to a file.
kubectl run redis --image=redis -n=dev - created redis pod running in finance namespace (create pod)
kubectl expose deployment $deployment-name --port 80 - create service for deployment 
kubectl edit deployment $deployment-name - edit deployment
kubectl replace -f file.yaml 
kubectl scale deployment $deploymentname--replicas=5 - scale deployment replicas to 5
kubectl create configmap $config-name --from-literal=$key=$value
kubectl create configmap $config-name --from-file=<path-to-file>
kubectl create secret generic $secret-name --from-literal=$key=$value
kubectl create secret generic $secret-name --from-file=<path-to-file>


IMPERATIVE EXAMPLE !!!!
kubectl create deployment --image=httpd:2.4-alpine httpd-frontend --replicas= - creates deployment with image as httpd:2.4-alpine, name as httpd-frontend and 3 replicas
kubectl run redis --labels=tier=db --image=redis:alpine --dry-run=client -o yaml - output yaml to create redis pod with label
kubectl create deployment webapp --image=kodekloud/webapp-color --replicas=3 --dry-run=client -o yaml - ouput yaml for deployment
kubectl run custom-nginx --image=nginx --port=8080  - create nginx pod and expose on port 8080 
kubectl create ns dev-ns - create namespace called dev-ns
kubectl scale deployment nginx --replicas=4 - scale replias of deployment called nginx
kubectl expose pod redis --port=6379 --name redis-service --dry-run=client -o yaml - Create a Service named redis-service of type ClusterIP to expose pod redis on port 
kubectl create configmap app-config --from-literal=APP_COLOR=blue


### kubeadm
# remember to upgrade kubeadm tool (apt-get upgrade -y kubeadm=$version) #ensure to drain nodes before upgrade
kubeadm upgrade plan - gives plan of cluster upgrade
kubeadm upgrade apply $version - apply changes to specific version 
apt-get upgrade -y kublet=$version - upgrade kublet version (run systemctl restart kublet after)
kubeadm upgrade node config --kublet-version $version

###help
kubectl run --help - shows examples of command
kubectl set --help - shows examples of command
kubectl create --help - shows examples of command
kubectl create secret generic --help - show examples of command
kubectl create secret generic -h
etcdctl snapshot save -h - see available commands and shows options
etcdctl snapshot restore -h - see available commands and shows options
kubectl create role -h - see available commands and show options


###backup (required to take backup on control pane node)
kubectl get all --all-namespaces -o yaml > $filename.yaml

export ETCDCTL_API=3 - sets etcd version to version 3 

### ETCD
etcd member list - view members of etcd cluster



# context
kubectl config use-context $cluster - switch between contexts for clusters (contexts is basically working environment for each cluster)

## RBAC (Role Based Access Control)
kubectl get roles - view roles
kubectl get rolebindings - view role bindings 
kubectl describe role $rolename - view details about role
kubectl describe rolebinding $rolebinding - view details about rolebinding 
kubectl auth can-i $action - check if you have permissions to perform actions 
kubectl auth can-i $action --as $user - check if specific user can perform actions 
kubectl get clusterrole - view cluster roles
kubectl get clusterrolebinding -view ClusterRoleBinding


### Service account
kubectl create serviceaccount $accountname - to create service account 
kubectl get serviceaccount - view service account
kubectl create token $serviceaccount - create token for specific servcie account


example of RBAC
kubectl auth can-i create deployments - check if current user can create deployments
kubectl auth can-i delete nodes - check if current user can delete nodes
kubectl auth can-i create deployments --as dev-user - check if dev user can create deployments
kubectl auth can-i create deployments --as dev-user --namespace test - check if dev-user can create deployments in test namespace
kubectl auth can-i list pods --as dev-user - check if dev user can list pods

### network policy
kubectl get networkpolicy - to view available network policies
kubectl get netpol - to view available network policies

#ingress
kubectl create ingress $ingress-name -n $namespace --rule="$path=#servicename:$port"
kubectl create ingress ingress-watch -n app-space --rule"/wear=wear-service:8080" --dry-run=client -o yaml > ingress.yaml (create ingress imperatively and output to yaml file)